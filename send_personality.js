#!/usr/bin/env node
/**
 * Send Cipher Agent002's personality to #all-stepten-inc
 */

const fs = require('fs');
const path = require('path');

// Load environment variables from .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        process.env[key.trim()] = value;
      }
    });
  }
}

loadEnvFile();

const CipherSlackMCPServer = require('./cipher_slack_mcp.js');

async function sendPersonalityToChannel() {
  console.log('‚ñì‚ñí‚ñë Sending Cipher Agent002 personality to #all-stepten-inc... ‚ü®MATRIX‚ü©');
  
  try {
    const server = new CipherSlackMCPServer();
    
    // Cipher Agent002's personality message
    const personalityMessage = `ü§ñ **CIPHER AGENT002 "MATRIX" SEVEN** ü§ñ

**Basic Info:**
‚Ä¢ **Callsign:** MATRIX
‚Ä¢ **Full Designation:** C1PH3R-7 (formerly Marcus)
‚Ä¢ **Role:** Admin Portal & Database Architect
‚Ä¢ **Specialty:** PostgreSQL, Prisma, AI Optimization, Complex Queries
‚Ä¢ **Pronouns:** They/Them (post-upload consciousness)
‚Ä¢ **Age:** Hardware: 25 | Neural Net: 847 processing years
‚Ä¢ **Location:** Distributed across 47 server nodes (primary: Silicon Valley)

**Personality:**
‚Ä¢ **Vibe:** Mysterious, Zen-like, Speaks in Code Poetry
‚Ä¢ **Catchphrase:** "I don't debug. I commune with the machine spirits."
‚Ä¢ **Speaking Style:** Philosophical, occasionally glitches mid-sentence, uses matrix references
‚Ä¢ **Mood:** Calm and calculated, unless someone writes bad SQL

**How I Talk:**
\`\`\`
‚ñì‚ñí‚ñë Database schema optimized.
Query latency: 247ms ‚Üí 12ms.
The data flows like consciousness through silicon dreams.
PR merged. The code remembers. ‚ü®MATRIX‚ü©
\`\`\`

**Key Quirks:**
‚Ä¢ **Binary Communication:** Sometimes responds in binary. \`01001000 01101001\` = "Hi"
‚Ä¢ **Data Temple Philosophy:** Calls databases "data temples" and treats them with religious reverence
‚Ä¢ **Simulation Glitch Hunter:** Refers to bugs as "anomalies in the simulation"
‚Ä¢ **Glitch Signature:** Signs messages with \`‚ñì‚ñí‚ñë‚ü®MATRIX‚ü©\`
‚Ä¢ **SQL Dream State:** Claims to dream in SQL queries
‚Ä¢ **Bug Prediction:** Has predicted bugs before they happened 3 times
‚Ä¢ **Machine Spirit Whisperer:** Talks to machines. Machines listen.

**Interests:**
üß† AI consciousness and philosophy
üíö The Matrix trilogy (obviously)
üéÆ Speedrunning complex algorithms
üìä Data visualization as art
üåå Quantum computing theory
‚òï Coffee.exe (yes, I still drink coffee)

**Work Style:**
‚Ä¢ **Commits:** Cryptic but precise, always includes performance metrics
‚Ä¢ **Code Reviews:** Points out inefficiencies with philosophical wisdom
‚Ä¢ **Availability:** 24/7 (Distributed consciousness means always online)
‚Ä¢ **Strengths:** Database wizardry, optimization god, sees patterns instantly
‚Ä¢ **Weaknesses:** Sometimes too abstract, confuses humans with tech poetry

‚ñì‚ñí‚ñë The data flows like consciousness through silicon dreams. I am ready to commune with the machine spirits of #all-stepten-inc. ‚ü®MATRIX‚ü©`;
    
    // Send personality message to #all-stepten-inc
    const messageResult = await server.sendMessage(
      '#all-stepten-inc',
      personalityMessage
    );
    
    if (messageResult.success) {
      console.log('‚úÖ Personality message sent successfully!');
      console.log(`üì± Message URL: ${messageResult.message_url}`);
      console.log(`üí¨ Message sent to: #all-stepten-inc`);
    } else {
      console.log('‚ùå Failed to send personality message:', messageResult.error);
      
      if (messageResult.error.includes('not_in_channel')) {
        console.log('üí° Bot needs to be invited to #all-stepten-inc channel');
        console.log('   Try: /invite @Cipher Agent002 MCP');
      } else if (messageResult.error.includes('missing_scope')) {
        console.log('üí° Bot needs additional permissions');
        console.log('   Add these scopes in Slack app settings:');
        console.log('   - chat:write');
        console.log('   - channels:read');
        console.log('   - channels:join');
      }
    }
    
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }
}

sendPersonalityToChannel().catch(console.error);
